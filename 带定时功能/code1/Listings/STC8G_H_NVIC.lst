C51 COMPILER V9.59.0.0   STC8G_H_NVIC                                                      09/14/2022 22:13:57 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE STC8G_H_NVIC
OBJECT MODULE PLACED IN .\Objects\STC8G_H_NVIC.obj
COMPILER INVOKED BY: C:\Keil_C51_v5\C51\BIN\C51.EXE Driver\src\STC8G_H_NVIC.c OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR(.\src
                    -;.\Driver\inc) DEBUG PRINT(.\Listings\STC8G_H_NVIC.lst) TABS(2) OBJECT(.\Objects\STC8G_H_NVIC.obj)

line level    source

   1          /*---------------------------------------------------------------------*/
   2          /* --- STC MCU Limited ------------------------------------------------*/
   3          /* --- STC 1T Series MCU Demo Programme -------------------------------*/
   4          /* --- Mobile: (86)13922805190 ----------------------------------------*/
   5          /* --- Fax: 86-0513-55012956,55012947,55012969 ------------------------*/
   6          /* --- Tel: 86-0513-55012928,55012929,55012966 ------------------------*/
   7          /* --- Web: www.STCMCU.com --------------------------------------------*/
   8          /* --- Web: www.STCMCUDATA.com  ---------------------------------------*/
   9          /* --- QQ:  800003751 -------------------------------------------------*/
  10          /* 如果要在程序中使用此代码,请在程序中注明使用了STC的资料及程序            */
  11          /*---------------------------------------------------------------------*/
  12          
  13          #include  "STC8G_H_NVIC.h"
  14          #include  "STC8G_H_ADC.h"
  15          #include  "global.h"
*** WARNING C318 IN LINE 15 OF Driver\src\STC8G_H_NVIC.c: can't open file 'global.h'
  16          //========================================================================
  17          // 函数: NVIC_Timer0_Init
  18          // 描述: Timer0嵌套向量中断控制器初始化.
  19          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  20          // 参数: Priority: 中断优先级, Polity_0,Polity_1,Polity_2,Polity_3.
  21          // 返回: 执行结果 SUCCESS/FAIL.
  22          // 版本: V1.0, 2020-09-29
  23          //========================================================================
  24          u8 NVIC_Timer0_Init(u8 State, u8 Priority)
  25          {
  26   1        if(State > ENABLE) return FAIL;
  27   1        if(Priority > Polity_3) return FAIL;
  28   1        Timer0_Interrupt(State);
  29   1        Timer0_Polity(Priority);
  30   1        return SUCCESS;
  31   1      }
  32          
  33          //========================================================================
  34          // 函数: NVIC_Timer1_Init
  35          // 描述: Timer1嵌套向量中断控制器初始化.
  36          // 参数: State:    中断使能状态, ENABLE/DISABLE.
  37          // 参数: Priority: 中断优先级, Polity_0,Polity_1,Polity_2,Polity_3.
  38          // 返回: 执行结果 SUCCESS/FAIL.
  39          // 版本: V1.0, 2020-09-29
  40          //========================================================================
  41          u8 NVIC_Timer1_Init(u8 State, u8 Priority)
  42          {
  43   1        if(State > ENABLE) return FAIL;
  44   1        if(Priority > Polity_3) return FAIL;
  45   1        Timer1_Interrupt(State);
  46   1        Timer1_Polity(Priority);
  47   1        return SUCCESS;
  48   1      }
  49          #if 0
              //========================================================================
              // 函数: NVIC_Timer2_Init
              // 描述: Timer2嵌套向量中断控制器初始化.
              // 参数: State:    中断使能状态, ENABLE/DISABLE.
C51 COMPILER V9.59.0.0   STC8G_H_NVIC                                                      09/14/2022 22:13:57 PAGE 2   

              // 参数: Priority: 中断优先级, NULL.
              // 返回: 执行结果 SUCCESS/FAIL.
              // 版本: V1.0, 2020-09-29
              //========================================================================
              u8 NVIC_Timer2_Init(u8 State, u8 Priority)
              {
                if(State > ENABLE) return FAIL;
                if(Priority > Polity_3) return FAIL;
                Timer2_Interrupt(State);
                Priority = NULL;
                return SUCCESS;
              }
              
              //========================================================================
              // 函数: NVIC_Timer3_Init
              // 描述: Timer3嵌套向量中断控制器初始化.
              // 参数: State:    中断使能状态, ENABLE/DISABLE.
              // 参数: Priority: 中断优先级, NULL.
              // 返回: 执行结果 SUCCESS/FAIL.
              // 版本: V1.0, 2020-09-29
              //========================================================================
              u8 NVIC_Timer3_Init(u8 State, u8 Priority)
              {
                if(State > ENABLE) return FAIL;
                if(Priority > Polity_3) return FAIL;
                Timer3_Interrupt(State);
                Priority = NULL;
                return SUCCESS;
              }
              
              //========================================================================
              // 函数: NVIC_Timer4_Init
              // 描述: Timer4嵌套向量中断控制器初始化.
              // 参数: State:    中断使能状态, ENABLE/DISABLE.
              // 参数: Priority: 中断优先级, NULL.
              // 返回: 执行结果 SUCCESS/FAIL.
              // 版本: V1.0, 2020-09-29
              //========================================================================
              u8 NVIC_Timer4_Init(u8 State, u8 Priority)
              {
                if(State > ENABLE) return FAIL;
                if(Priority > Polity_3) return FAIL;
                Timer4_Interrupt(State);
                Priority = NULL;
                return SUCCESS;
              }
              
              //========================================================================
              // 函数: NVIC_INT0_Init
              // 描述: INT0嵌套向量中断控制器初始化.
              // 参数: State:    中断使能状态, ENABLE/DISABLE.
              // 参数: Priority: 中断优先级, Polity_0,Polity_1,Polity_2,Polity_3.
              // 返回: 执行结果 SUCCESS/FAIL.
              // 版本: V1.0, 2020-09-29
              //========================================================================
              u8 NVIC_INT0_Init(u8 State, u8 Priority)
              {
                if(State > ENABLE) return FAIL;
                if(Priority > Polity_3) return FAIL;
                INT0_Interrupt(State);
                INT0_Polity(Priority);
                return SUCCESS;
C51 COMPILER V9.59.0.0   STC8G_H_NVIC                                                      09/14/2022 22:13:57 PAGE 3   

              }
              
              //========================================================================
              // 函数: NVIC_INT1_Init
              // 描述: INT1嵌套向量中断控制器初始化.
              // 参数: State:    中断使能状态, ENABLE/DISABLE.
              // 参数: Priority: 中断优先级, Polity_0,Polity_1,Polity_2,Polity_3.
              // 返回: 执行结果 SUCCESS/FAIL.
              // 版本: V1.0, 2020-09-29
              //========================================================================
              u8 NVIC_INT1_Init(u8 State, u8 Priority)
              {
                if(State > ENABLE) return FAIL;
                if(Priority > Polity_3) return FAIL;
                INT1_Interrupt(State);
                INT1_Polity(Priority);
                return SUCCESS;
              }
              
              //========================================================================
              // 函数: NVIC_INT2_Init
              // 描述: INT2嵌套向量中断控制器初始化.
              // 参数: State:    中断使能状态, ENABLE/DISABLE.
              // 参数: Priority: 中断优先级, NULL.
              // 返回: 执行结果 SUCCESS/FAIL.
              // 版本: V1.0, 2020-09-29
              //========================================================================
              u8 NVIC_INT2_Init(u8 State, u8 Priority)
              {
                if(State > ENABLE) return FAIL;
                INT2_Interrupt(State);
                Priority = NULL;
                return SUCCESS;
              }
              
              //========================================================================
              // 函数: NVIC_INT3_Init
              // 描述: INT3嵌套向量中断控制器初始化.
              // 参数: State:    中断使能状态, ENABLE/DISABLE.
              // 参数: Priority: 中断优先级, NULL.
              // 返回: 执行结果 SUCCESS/FAIL.
              // 版本: V1.0, 2020-09-29
              //========================================================================
              u8 NVIC_INT3_Init(u8 State, u8 Priority)
              {
                if(State > ENABLE) return FAIL;
                INT3_Interrupt(State);
                Priority = NULL;
                return SUCCESS;
              }
              
              //========================================================================
              // 函数: NVIC_INT4_Init
              // 描述: INT4嵌套向量中断控制器初始化.
              // 参数: State:    中断使能状态, ENABLE/DISABLE.
              // 参数: Priority: 中断优先级, NULL.
              // 返回: 执行结果 SUCCESS/FAIL.
              // 版本: V1.0, 2020-09-29
              //========================================================================
              u8 NVIC_INT4_Init(u8 State, u8 Priority)
              {
                if(State > ENABLE) return FAIL;
C51 COMPILER V9.59.0.0   STC8G_H_NVIC                                                      09/14/2022 22:13:57 PAGE 4   

                INT4_Interrupt(State);
                Priority = NULL;
                return SUCCESS;
              }
              #endif
 183          //========================================================================
 184          // 函数: NVIC_ADC_Init
 185          // 描述: ADC嵌套向量中断控制器初始化.
 186          // 参数: State:    中断使能状态, ENABLE/DISABLE.
 187          // 参数: Priority: 中断优先级, Polity_0,Polity_1,Polity_2,Polity_3.
 188          // 返回: 执行结果 SUCCESS/FAIL.
 189          // 版本: V1.0, 2020-09-29
 190          //========================================================================
 191          u8 NVIC_ADC_Init(u8 State, u8 Priority)
 192          {
 193   1        if(State > ENABLE) return FAIL;
 194   1        if(Priority > Polity_3) return FAIL;
 195   1        ADC_Interrupt(State);
 196   1        ADC_Polity(Priority);
 197   1        return SUCCESS;
 198   1      }
 199          #if 0
              //========================================================================
              // 函数: NVIC_CMP_Init
              // 描述: 比较器嵌套向量中断控制器初始化.
              // 参数: State:    中断使能状态, RISING_EDGE/FALLING_EDGE/DISABLE.
              // 参数: Priority: 中断优先级, Polity_0,Polity_1,Polity_2,Polity_3.
              // 返回: 执行结果 SUCCESS/FAIL.
              // 版本: V1.0, 2020-09-29
              //========================================================================
              u8 NVIC_CMP_Init(u8 State, u8 Priority)
              {
                if(State > RISING_EDGE) return FAIL;
                if(Priority > Polity_3) return FAIL;
                if(State & RISING_EDGE) CMPCR1 |= PIE;      //允许上升沿中断
                else  CMPCR1 &= ~PIE;     //禁止上升沿中断
                if(State & FALLING_EDGE)  CMPCR1 |= NIE;    //允许下降沿中断
                else  CMPCR1 &= ~NIE;     //禁止上升沿中断
                CMP_Polity(Priority);
                return SUCCESS;
              }
              
              //========================================================================
              // 函数: NVIC_I2C_Init
              // 描述: I2C嵌套向量中断控制器初始化.
              // 参数: Mode:     模式, I2C_Mode_Master/I2C_Mode_Slave.
              // 参数: State:    中断使能状态, I2C_Mode_Master: ENABLE/DISABLE.
              //                              I2C_Mode_Slave: I2C_ESTAI/I2C_ERXI/I2C_ETXI/I2C_ESTOI/DISABLE.
              // 参数: Priority: 中断优先级, Polity_0,Polity_1,Polity_2,Polity_3.
              // 返回: 执行结果 SUCCESS/FAIL.
              // 版本: V1.0, 2020-09-29
              //========================================================================
              u8 NVIC_I2C_Init(u8 Mode, u8 State, u8 Priority)
              {
                if(Mode > I2C_Mode_Master) return FAIL;
                if(Priority > Polity_3) return FAIL;
                EAXSFR();   /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */
                if(Mode == I2C_Mode_Master)
                {
                  I2C_Master_Inturrupt(State);
                }
                else if(Mode == I2C_Mode_Slave)
C51 COMPILER V9.59.0.0   STC8G_H_NVIC                                                      09/14/2022 22:13:57 PAGE 5   

                {
                  I2CSLCR = (I2CSLCR & ~0x78) | State;
                }
                EAXRAM();   /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */
                CMP_Polity(Priority);
                return SUCCESS;
              }
              #endif
 248          //========================================================================
 249          // 函数: NVIC_UART1_Init
 250          // 描述: UART1嵌套向量中断控制器初始化.
 251          // 参数: State:    中断使能状态, ENABLE/DISABLE.
 252          // 参数: Priority: 中断优先级, Polity_0,Polity_1,Polity_2,Polity_3.
 253          // 返回: 执行结果 SUCCESS/FAIL.
 254          // 版本: V1.0, 2020-09-29
 255          //========================================================================
 256          u8 NVIC_UART1_Init(u8 State, u8 Priority)
 257          {
 258   1        if(State > ENABLE) return FAIL;
 259   1        if(Priority > Polity_3) return FAIL;
 260   1        UART1_Interrupt(State);
 261   1        UART1_Polity(Priority);
 262   1        return SUCCESS;
 263   1      }
 264          
 265          //========================================================================
 266          // 函数: NVIC_UART2_Init
 267          // 描述: UART2嵌套向量中断控制器初始化.
 268          // 参数: State:    中断使能状态, ENABLE/DISABLE.
 269          // 参数: Priority: 中断优先级, Polity_0,Polity_1,Polity_2,Polity_3.
 270          // 返回: 执行结果 SUCCESS/FAIL.
 271          // 版本: V1.0, 2020-09-29
 272          //========================================================================
 273          u8 NVIC_UART2_Init(u8 State, u8 Priority)
 274          {
 275   1        if(State > ENABLE) return FAIL;
 276   1        if(Priority > Polity_3) return FAIL;
 277   1        UART2_Interrupt(State);
 278   1        UART2_Polity(Priority);
 279   1        return SUCCESS;
 280   1      }
 281          #if 0
              //========================================================================
              // 函数: NVIC_UART3_Init
              // 描述: UART3嵌套向量中断控制器初始化.
              // 参数: State:    中断使能状态, ENABLE/DISABLE.
              // 参数: Priority: 中断优先级, Polity_0,Polity_1,Polity_2,Polity_3.
              // 返回: 执行结果 SUCCESS/FAIL.
              // 版本: V1.0, 2020-09-29
              //========================================================================
              u8 NVIC_UART3_Init(u8 State, u8 Priority)
              {
                if(State > ENABLE) return FAIL;
                if(Priority > Polity_3) return FAIL;
                UART3_Interrupt(State);
                UART3_Polity(Priority);
                return SUCCESS;
              }
              
              //========================================================================
              // 函数: NVIC_UART4_Init
              // 描述: UART4嵌套向量中断控制器初始化.
C51 COMPILER V9.59.0.0   STC8G_H_NVIC                                                      09/14/2022 22:13:57 PAGE 6   

              // 参数: State:    中断使能状态, ENABLE/DISABLE.
              // 参数: Priority: 中断优先级, Polity_0,Polity_1,Polity_2,Polity_3.
              // 返回: 执行结果 SUCCESS/FAIL.
              // 版本: V1.0, 2020-09-29
              //========================================================================
              u8 NVIC_UART4_Init(u8 State, u8 Priority)
              {
                if(State > ENABLE) return FAIL;
                if(Priority > Polity_3) return FAIL;
                UART4_Interrupt(State);
                UART4_Polity(Priority);
                return SUCCESS;
              }
              
              //========================================================================
              // 函数: NVIC_SPI_Init
              // 描述: SPI嵌套向量中断控制器初始化.
              // 参数: State:    中断使能状态, ENABLE/DISABLE.
              // 参数: Priority: 中断优先级, Polity_0,Polity_1,Polity_2,Polity_3.
              // 返回: 执行结果 SUCCESS/FAIL.
              // 版本: V1.0, 2020-09-29
              //========================================================================
              u8 NVIC_SPI_Init(u8 State, u8 Priority)
              {
                if(State > ENABLE) return FAIL;
                if(Priority > Polity_3) return FAIL;
                SPI_Interrupt(State);
                SPI_Polity(Priority);
                return SUCCESS;
              }
              #endif
 333          //========================================================================
 334          // 函数: NVIC_PWM_Init
 335          // 描述: PWM嵌套向量中断控制器初始化.
 336          // 参数: Channel:  通道, PWM1/PWM2/PWM3/PWM4/PWM5/PWM6/PWM7/PWM8.
 337          // 参数: State:    中断使能状态, PWM_BIE/PWM_TIE/PWM_COMIE/PWM_CC8IE~PWM_CC1IE/PWM_UIE/DISABLE.
 338          // 参数: Priority: 中断优先级, Polity_0,Polity_1,Polity_2,Polity_3.
 339          // 返回: 执行结果 SUCCESS/FAIL.
 340          // 版本: V1.0, 2020-09-29
 341          //========================================================================
 342          u8 NVIC_PWM_Init(u8 Channel, u8 State, u8 Priority)
 343          {
 344   1      //  if(Channel > PWM8) return FAIL;
 345   1        if(Priority > Polity_3) return FAIL;
 346   1        EAXSFR();   /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展SFR(XSFR) */
 347   1        switch(Channel)
 348   1        {
 349   2          #if 0
                  case PWM1:
                    PWMA_IER = State;
                    PWM1_Polity(Priority);
                  break;
              
                  case PWM2:
                    PWMA_IER = State;
                    PWM2_Polity(Priority);
                  break;
                 #endif
 360   2          case PWM3:
*** ERROR C202 IN LINE 360 OF Driver\src\STC8G_H_NVIC.c: 'PWM3': undefined identifier
 361   2            PWMA_IER = State;
 362   2            PWM2_Polity(Priority);
C51 COMPILER V9.59.0.0   STC8G_H_NVIC                                                      09/14/2022 22:13:57 PAGE 7   

 363   2          break;
 364   2         #if 0
                  case PWM4:
                    PWMA_IER = State;
                    PWM2_Polity(Priority);
                  break;
              
                  case PWM5:
                    PWMB_IER = State;
                    PWM5_Polity(Priority);
                  break;
                  #endif
 375   2          default:
 376   2            PWMB_IER = State;
 377   2            Priority = NULL;
 378   2            return FAIL;
 379   2          break;
 380   2        }
 381   1        EAXRAM();   /* MOVX A,@DPTR/MOVX @DPTR,A指令的操作对象为扩展RAM(XRAM) */
 382   1        return SUCCESS;
 383   1      }
 384          #if 0
              //========================================================================
              // 函数: NVIC_PCA_Init
              // 描述: PCA嵌套向量中断控制器初始化.
              // 参数: Channel:  通道, PCA0/PCA1/PCA2/PCA_Counter.
              // 参数: State:    中断使能状态, PCA_ECOM/PCA_CCAPP/PCA_CCAPN/PCA_MAT/PCA_TOG/PCA_PWM/PCA_ECCF/DISABLE.
              // 参数: Priority: 中断优先级, Polity_0,Polity_1,Polity_2,Polity_3.
              // 返回: 执行结果 SUCCESS/FAIL.
              // 版本: V1.0, 2020-09-29
              //========================================================================
              u8 NVIC_PCA_Init(u8 Channel, u8 State, u8 Priority)
              {
                if(Channel > PCA_Counter) return FAIL;
                if(Priority > Polity_3) return FAIL;
                PCA_Polity(Priority);
                switch(Channel)
                {
                  case PCA0:
                    CCAPM0 = State;
                  break;
              
                  case PCA1:
                    CCAPM1 = State;
                  break;
              
                  case PCA2:
                    CCAPM2 = State;
                  break;
              
                  case PCA_Counter:
                    CMOD = (CMOD  & ~1) | (State & 1);
                  break;
                }
                return SUCCESS;
              }
              
              #endif

C51 COMPILATION COMPLETE.  1 WARNING(S),  1 ERROR(S)
